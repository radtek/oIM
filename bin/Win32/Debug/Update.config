<?xml version="1.0" encoding="utf-8" ?>
<!-- ========================================================================== 
Updater DB configuration file 

参数说明：
1、database\name     数据库名称，包含扩展名
2、destpath          目标个所在文件夹
3、condition         目录结构版本信息 
                    GT：大于
                    GE: 大于等于  
                    LT：小于 
                    LE: 小于等于
                    NE：不等于 
                    EQ：等于 
                    AND：&& （逻辑与）
                    OR：||  （逻辑或）
                    XOR：^  （异或）
4、statement         SQL语句
5、global            1、表明语句为全局 0或空为普通语句 全局语句不会计算condition条件

注意事项
1、所有节点名称均采用小写
2、数据库名称包含扩展名
3、逻辑运算符目前只支持&& || ^三种操作，用字符串来表示
4、比较运算符只支持 大于、小于、等于、不等于四个，使用字符串来表示
5、condition严格按照样例来添写，以空格做为间隔符
6、statement语句为完整语句，登录insert into aa(id, name) values(1, 'zhangsan')

History:
    Date      auth      contents
    2014/7/16 lwq       t_dept_emp add field: orders
    2014/7/17 lwq       t_dept Add field: pinyin, pinyin_s
============================================================================ -->
<eimdb version="0.9.2">
	<database file="$(eIMData)Users.db" global="1" version="10">
		<!--具体数据库操作语句,注意语句顺序-->
		<!-- 启用 WAL 模式 -->
		<sql statement="PRAGMA journal_mode=WAL;" />
		<!-- eid_:用户ID; name:登录名; psw:密码; db_ver:数据库版本; timestamp:最后登录时间; flag:标识 -->
		<sql statement="CREATE TABLE IF NOT EXISTS t_login_user(eid_ INTEGER UNIQUE NOT NULL, name TEXT(32), psw TEXT(16), db_ver INTEGER, timestamp INTEGER, flag INTEGER default 0);" />
	</database>

	<database file="$(LoginId)contacts.db" version="20">
		<!-- 启用 WAL 模式 -->
		<sql statement="PRAGMA journal_mode=WAL;" />
		<!-- eid_:用户ID; Co:企业信息最后更新时间; Dept:企业组织构架最后更新时间; Emps:企业员工列表最后更新时间; DeptEmps:部门与员工最后更新时间;personal_info 个人信息更新时间;comcontact常用联系人更新时间;comdept常用部门更新时间;personal_attention关注联系人更新时间;globalcomcontact缺省常用联系人更新时间;others_avatar其他人头像更新时间;personal_avatar自己头像更新时间 Vgts:虚拟组最后更新时间; EmpRank:级别信息最后更新时间; EmpDuty:业务信息最后更新时间;  EmpArea:地域信息最后更新时间;speciallist 特殊用户最后更新时间 specialwhitelist 特殊用户白名单 robot 机器人; showdept 更新部门显示时间-->
		<sql statement="CREATE TABLE IF NOT EXISTS t_timestamp(eid_ INTEGER UNIQUE NOT NULL, co INTEGER, dept INTEGER, emps INTEGER, dept_emps INTEGER, personal_info INTEGER, comcontact INTEGER, comdept INTEGER, personal_attention INTEGER, globalcomcontact INTEGER, others_avatar INTEGER, personal_avatar INTEGER, vgts INTEGER, emp_rank INTEGER, emp_duty INTEGER, emp_area INTEGER, speciallist INTEGER, specialwhitelist INTEGER, robot INTEGER, showdept INTEGER);" />
		<sql statement="ALTER TABLE t_timestamp ADD COLUMN robot INTEGER;" condition="version LT 3 AND version GT 0" />
		<sql statement="ALTER TABLE t_timestamp ADD COLUMN showdept INTEGER;" condition="version LT 13 AND version GT 0" />
		<!-- 将showdept更新为0，以获取全部的隐藏相关内容，以升级数，更新部门用户表的默认值为2（显示部门及用户） -->
		<sql statement="UPDATE t_timestamp SET showdept=0;" condition="version LT 16" />

		<!-- did_:部门ID; name:部门名称; pid:上一级部门ID; tel:部门电话; orders:序号(0xffff为无序号); pinyin:拼音; pinyin_s:拼音组合; flag:标识; coid:公司ID; update_time:最后更新时间，show: 显示类型 -->
		<sql statement="CREATE TABLE IF NOT EXISTS t_dept(did_ INTEGER PRIMARY KEY, name TEXT(256),ename TEXT(256), pid INTEGER, tel TEXT(65), orders INTEGER, pinyin TEXT, pinyin_s TEXT, flag INTEGER default 0, coid INTEGER, update_time INTEGER, show INTEGER DEFAULT 2);" />
		<sql statement="CREATE INDEX IF NOT EXISTS t_dept_pid_index ON t_dept(pid);" />
		<sql statement="ALTER TABLE t_dept ADD COLUMN update_time INTEGER;" condition="version LT 2 AND version GT 0" />
		<sql statement="ALTER TABLE t_dept ADD COLUMN show INTEGER DEFAULT 2;" condition="version LT 16 AND version GT 0" />    
		<!-- did_:部门ID; eid_:员工ID; orders:序号(0xffff为无序号); flag:更新标识; update_time:最后更新时间 -->
		<sql statement="CREATE TABLE IF NOT EXISTS t_dept_emp(did_ INTEGER NOT NULL, eid_ INTEGER NOT NULL, orders INTEGER, flag INTEGER default 0, update_time INTEGER, PRIMARY KEY(did_, eid_));" />
		<sql statement="ALTER TABLE t_dept_emp ADD COLUMN update_time INTEGER;" condition="version LT 2 AND version GT 0" />    
		<!-- eid_:员工ID; ucode:员工编号(WD为登录账号); name:姓名; pinyin:拼音; pinyin_s:拼音组合; birthday:出生年月; sex:性别; duty:职务; email:电子邮箱; tel:办公电话; home_tel:宅电; phone:手机; emgr_phone:紧急电话; logo:头像; sign:个性签名; flag:标识; rank_id:本人级别; prof_id:本人业务; aera_id本人地域; update_time:最后更新时间；hiredate：入职日期-->
		<sql statement="CREATE TABLE IF NOT EXISTS t_emp( eid_ INTEGER PRIMARY KEY, ucode TEXT(16) NOT NULL, name TEXT(128),ename TEXT(128), pinyin TEXT, pinyin_s TEXT, birthday INTEGER, sex INTEGER, duty TEXT(32), email TEXT(32), tel TEXT(20), home_tel TEXT(20), phone TEXT(11), emgr_phone TEXT(11), logo TEXT(6), sign TEXT(46), flag INTEGER default 0, rank_id INTEGER default 1, prof_id INTEGER, aera_id INTEGER, address TEXT(1024), postalcode TEXT(64), fax TEXT(64), logotime INTEGER, update_time INTEGER, hiredate INTEGER );" />
		<sql statement="CREATE INDEX IF NOT EXISTS t_emp_ucode_index ON t_emp(ucode);" />
		<sql statement="ALTER TABLE t_emp ADD COLUMN update_time INTEGER;" condition="version LT 2 AND version GT 0" />
		<sql statement="ALTER TABLE t_emp ADD COLUMN hiredate INTEGER;" condition="version LT 2 AND version GT 0" />
		<sql statement="UPDATE t_emp SET logotime=0;" condition="version LT 20" />

		<!-- sid_:会话ID; type:会话类型; title:会话主题; remark:备注; flag:标识; cid:创建者ID; ctime:会话创建或成员变更时间戳; utime:消息更后更新时间; off_msg:离线消息条数; new_msg:未读消息条数; sutime:会话成员变更时间-->
		<sql statement="CREATE TABLE IF NOT EXISTS t_session(sid_ BIGINT PRIMARY KEY,type INTEGER, title TEXT(50), remark TEXT(50), flag INTEGER default 0, cid INTEGER, ctime INTEGER, utime INTEGER, off_msg INTEGER, new_msg INTEGER, sutime INTEGER,virgroupid BIGINT default 0);" />
		<sql statement="CREATE INDEX IF NOT EXISTS t_session_utime_index ON t_session (utime);" />
		<sql statement="ALTER TABLE t_session ADD COLUMN sutime INTEGER;" condition="version LT 4 AND version GT 0" />
		<sql statement="ALTER TABLE t_session ADD COLUMN virgroupid BIGINT;" condition="version LT 14 AND version GT 0" />
		<sql statement="CREATE TABLE IF NOT EXISTS t_session_top(sid_ BIGINT PRIMARY KEY, toptime INTEGER default 0);" />

		<!-- sid_:会话ID; eid_:成员ID; flag:标识 -->
		<sql statement="CREATE TABLE IF NOT EXISTS t_session_emp(sid_ BIGINT NOT NULL, eid_ INTEGER NOT NULL, flag INTEGER default 0, attrib INTEGER default 0, PRIMARY KEY(sid_, eid_));" />
		<!-- pid_:权限ID; param:权限值-->
		<sql statement="CREATE TABLE IF NOT EXISTS t_user_purview(pid_ INTEGER PRIMARY KEY, param INTEGER);" />
		<!-- 即时推送信息表:eid_:用户ID; createtime创建时间;updatetime更新时间;count计数-->
		<sql statement="CREATE TABLE IF NOT EXISTS t_subscribe_info(eid_ INTEGER PRIMARY KEY, createtime INTEGER, updatetime INTEGER, count INTEGER);" />
		<!-- 展开节点信息表:id_:部门、多人会话、自定义组ID值; type 0组织架构部门 1 自定义组 2多人会话 3 常用部门expandtime展开时间;is_expand是否是展开状态-->
		<sql statement="CREATE TABLE IF NOT EXISTS t_expanditem_info(id_ INTEGER, type INTEGER, expandtime INTEGER, count INTEGER, PRIMARY KEY(id_, type));" />
		<!-- 常用联系人表-->
		<sql statement="CREATE TABLE IF NOT EXISTS t_define_top_emp(eid INTEGER  PRIMARY KEY, is_default INTEGER, update_flag INTEGER);"/>
		<!-- 常用部门表-->
		<sql statement="CREATE TABLE IF NOT EXISTS t_define_top_dept(did INTEGER  PRIMARY KEY, update_flag INTEGER);"/>
		<!-- 自定义组-->
		<sql statement="CREATE TABLE IF NOT EXISTS t_define_group(id INTEGER  PRIMARY KEY, alias TEXT, update_flag INTEGER);"/>
		<!-- 常用群-->
		<sql statement="CREATE TABLE IF NOT EXISTS t_define_common_group(id INTEGER PRIMARY KEY, alias TEXT, update_flag INTEGER);"/>
		<!-- 自定义组成员-->
		<sql statement="CREATE TABLE IF NOT EXISTS t_define_group_emps(id INTEGER, eid INTEGER, update_flag INTEGER, PRIMARY KEY(id, eid));"/>
		<!--删除自定义组中的离职人员-->
		<!--sql statement="DELETE FROM t_define_group_emps WHERE (eid NOT IN (SELECT eid_ FROM t_dept_emp)) OR (eid IN (SELECT eid_ FROM t_dept_emp WHERE flag&0x00080000));"/-->
		<!--RTX单聊会话关系表，记录了离职人员参与的会话 sid_ 会话ID  emps：会话参与人，字符串用分号分隔 只记录单聊已离职人员数据 -->
		<sql statement="CREATE TABLE IF NOT EXISTS t_session_resign(sid_ BIGINT PRIMARY KEY, emps TEXT);"/>
		<!-- 机器人信息 -->
		<sql statement="CREATE TABLE IF NOT EXISTS t_robot_info(userid INTEGER PRIMARY KEY,usertype char,attribute INTEGER,greetings text);"/>
		<!--虚拟组信息表-->
		<sql statement="CREATE TABLE IF NOT EXISTS t_groupinfo_virtual(main_userid INTEGER NOT NULL, groupid VARCHAR PRIMARY KEY NOT NULL,member_num INTEGER NOT NULL DEFAULT 1, single_svc_num INTEGER NOT NULL DEFAULT 1, timeout_minute INTEGER NOT NULL DEFAULT 3, waiting_prompt VARCHAR  DEFAULT NULL, hangup_prompt VARCHAR  DEFAULT NULL,oncall_prompt VARCHAR  DEFAULT NULL,real_code int NOT NULL DEFAULT 0,update_time INTEGER NOT NULL DEFAULT 1, update_type int  NOT NULL DEFAULT 1, UNIQUE (groupid) ON CONFLICT REPLACE);"/>
		<!--虚拟组成员表-->
		<sql statement="CREATE TABLE IF NOT EXISTS t_groupmember_virtual(groupid VARCHAR NOT NULL ,userid INTEGER NOT NULL ,svc_status INTEGER NOT NULL DEFAULT 1,update_time INTEGER NOT NULL DEFAULT 1,update_type int NOT NULL DEFAULT 1, CONSTRAINT  index_user_group UNIQUE(groupid,userid) ON CONFLICT REPLACE);"/>
		<!-- 版本1的，触发全量下载 -->
		<sql statement="UPDATE t_timestamp SET dept=0, dept_emps=0, emps=0;" condition="version EQ 1" />
		<!--创建刷新通讯录表: id: 更新标识ID（使用timestamp）,type: 更新类型：1、倒计时完成后立即全量更新 2、下次登录时全量更新，10、用户手动刷新（从服务器）、 11、用户手动刷新（本地加载）；elapse：更新类型1的计数；flag：标识-->
		<sql statement="CREATE TABLE IF NOT EXISTS t_update_contacts(id_ INTEGER PRIMARY KEY, type INTEGER, elapse INTEGER, flag INTEGER);"/>
	</database>

	<database file="$(LoginId)msg.db" version="25" >
		<!-- 启用 WAL 模式 -->
		<sql statement="PRAGMA journal_mode=WAL;" />
		<!-- msgid_:消息ID; sid:会话ID; eid:发送者ID; msg:消息内容(XML); timestamp:发送时间; type:会话类型; flag:标识 -->
		<sql statement="CREATE TABLE IF NOT EXISTS t_session_records(msgid_ BIGINT PRIMARY KEY, sid BIGINT, eid INTEGER, msg TEXT, timestamp INTEGER, type INTEGER, flag INTEGER default 0);" />
		<sql statement="CREATE INDEX IF NOT EXISTS t_session_records_sid_index ON t_session_records (sid);" />
		<sql statement="CREATE INDEX IF NOT EXISTS t_session_records_timestamp_index ON t_session_records (timestamp);" />
		<sql statement="CREATE INDEX IF NOT EXISTS t_session_records_full_index ON t_session_records ([sid] ,[timestamp] ,[type] ,[flag] );" />

		<!-- 收藏的时间 -->
		<sql statement="CREATE TABLE IF NOT EXISTS t_collect_times(eid INTEGER PRIMARY KEY, collecttime INTEGER);" />

		<!-- 创建消息收藏表; eid:发送者; collectid_:收藏ID; msg:收藏内容(XML);timestamp:发送时间; type:会话类型; flag:标识  -->
		<sql statement="CREATE TABLE IF NOT EXISTS t_msg_collects(collectid_ BIGINT PRIMARY KEY, msg TEXT, title TEXT, isgroup BIGINT,timestamp INTEGER, type INTEGER, sendid INTEGER, needremind INTEGER,sid BIGINT);" />
		<sql statement="CREATE INDEX IF NOT EXISTS t_msg_collects_eid_index ON t_msg_collects(collectid_);" />
		<sql statement="drop index if exists t_msg_collects_timestamp_index;" />
		<sql statement="drop index if exists t_msg_collects_full_index;" />
		<sql statement="ALTER TABLE t_msg_collects ADD COLUMN sid BIGINT;" condition="version LT 21 AND version GT 0" />

		<!-- 创建URL文件下载保存表 -->
		<sql statement="CREATE TABLE IF NOT EXISTS t_url_file(msgid BIGINT, downurl TEXT, loaclPath TEXT, UNIQUE([msgid],[downurl]) ON CONFLICT REPLACE );" />
		<sql statement="CREATE INDEX IF NOT EXISTS t_url_file_loaclPath_index ON t_url_file([msgid] ,[downurl] ,[loaclPath]);" />

		<!-- 创建已读消息发送失败表 -->
		<sql statement="CREATE TABLE IF NOT EXISTS t_MsgRead_Error(msgid BIGINT, eid BIGINT, UNIQUE([msgid],[eid]) ON CONFLICT REPLACE );" />
		<sql statement="CREATE INDEX IF NOT EXISTS t_MsgRead_Error_index ON t_MsgRead_Error([msgid] ,[eid]);" />

		<!-- fid_:文件ID; name:文件名; Key:上传下载，size:文件大小; sender:发送者; timestamp:消息发送时间: localpath本地全路径; flag:标识 -->
		<sql statement="CREATE TABLE IF NOT EXISTS t_session_files(fid_ BIGINT PRIMARY KEY, msgid BIGINT, name TEXT(260), key TEXT(32), size BIGINT, sender INTEGER, timestamp INTEGER, localpath TEXT(260), flag INTEGER default 0);" />
		<sql statement="CREATE INDEX IF NOT EXISTS t_session_files_msgid_index ON t_session_files(msgid);" />
		<sql statement="CREATE INDEX IF NOT EXISTS t_session_files_full_index ON t_session_files([msgid] ,[sender] ,[timestamp] ,[flag] );" />
		<sql statement="CREATE INDEX IF NOT EXISTS t_session_files_key_index ON t_session_files(key);" />
		<!-- fid_:文件ID; name:文件名; size:文件大小; sender:发送者; receiver:接收者; timestamp:发送时间; token: 文件Token, localpath:本地全路径; flag:标识-->
		<sql statement="CREATE TABLE IF NOT EXISTS t_p2p_files(fid_ BIGINT PRIMARY KEY, msgid INTEGER, name TEXT(260), size BIGINT, receiver INTEGER, sender INTEGER, timestamp INTEGER, token TEXT(32), localpath TEXT(260), flag INTEGER default 0);" />
		<sql statement="CREATE INDEX IF NOT EXISTS t_p2p_files_msgid_index ON t_p2p_files(msgid);" />
		<sql statement="CREATE INDEX IF NOT EXISTS t_p2p_files_token_index ON t_p2p_files(token);" />
		<!--scid_:日程ID; sid:会话ID; eid:创建者ID; name:名称; detail:内容; begintime:开始时间; endtime:结束时间; remind:提醒类型; user_num:成员个数; users_id:成员ID; flag:标识 -->
		<sql statement="CREATE TABLE IF NOT EXISTS t_schedule(scid_ BIGINT PRIMARY KEY, sid BIGINT, eid INTEGER, name TEXT(60), detail TEXT(300), begintime INTEGER, endtime INTEGER, remind INTEGER, user_num INTEGER, users_id TEXT, flag INTEGER default 0, timestamp INTEGER default 0);" />
		<sql statement="CREATE INDEX IF NOT EXISTS t_schedule_sid_index ON t_schedule(sid);" />
		<sql statement="ALTER TABLE t_schedule ADD COLUMN timestamp INTEGER default 0;" condition="version LT 4 AND version GT 0" />
		<!--msgid_:消息ID eid_or_phone:对方EID或手机号 type:(0表明eid_or_phone为EID 1：eid_or_phone为手机号) msg:XML格式内容 timestamp:时间 offmsg_flag:离线消息标志1 newmsg_flag:未读消息标志1 flag:保留-->
		<sql statement="CREATE TABLE IF NOT EXISTS t_sms_records(msgid_ BIGINT PRIMARY KEY, eid_or_phone BIGINT, type INTEGER, msg TEXT, timestamp INTEGER, offmsg_flag INTEGER, newmsg_flag INTEGER, flag INTEGER default 0);" />
		<!--msgid_:消息ID recver:接收者:账号(名字) title:标题 msg:XML格式内容 type:0广播，否则一呼万应等 timestamp:时间 offmsg_flag:离线消息标志1 newmsg_flag:未读消息标志1 flag:保留-->
		<sql statement="CREATE TABLE IF NOT EXISTS t_bro_records(msgid_ BIGINT PRIMARY KEY, recver TEXT, title TEXT, msg TEXT, type INTEGER, timestamp INTEGER, offmsg_flag INTEGER, newmsg_flag INTEGER, flag INTEGER default 0);" />
		<sql statement="ALTER TABLE t_bro_records ADD COLUMN title TEXT;" condition="version LT 3 AND version GT 0" />
		<!--msgid_:消息ID sendid:接收者:ID title:标题 msg:XML格式内容 type:0广播，否则一呼万应等 timestamp:时间 offmsg_flag:离线消息标志1 newmsg_flag:未读消息标志1 flag:保留-->
		<sql statement="CREATE TABLE IF NOT EXISTS t_alert_records(msgid_ BIGINT PRIMARY KEY, sendid INTEGER, title TEXT, msg TEXT, type INTEGER, timestamp INTEGER, offmsg_flag INTEGER, newmsg_flag INTEGER, flag INTEGER default 0);" />
		<sql statement="CREATE INDEX IF NOT EXISTS t_alert_records_sendid_index ON t_alert_records (sendid);" />
		<!--消息msgid_消息Id, receiver 接收者Id, readtimer 已读时间， flag 标志 -->
		<sql statement="CREATE TABLE IF NOT EXISTS t_msg_read(msgid_ BIGINT, receiver INTEGER, readtimer INTEGER default 0, flag INTEGER default 0, timestamp INTEGER default 0, CONSTRAINT  uq_msgid_receiver  UNIQUE(msgid_,receiver) ON CONFLICT REPLACE);" />
		<sql statement="CREATE INDEX IF NOT EXISTS t_msg_read_index ON t_msg_read (msgid_);" />
		<sql statement="ALTER TABLE t_msg_read ADD COLUMN timestamp INTEGER default 0;" condition="version LT 4 AND version GT 0" />
		<sql statement="CREATE UNIQUE INDEX IF NOT EXISTS uq_msgid_receiver ON t_msg_read (msgid_, receiver);" />
	</database>

</eimdb>
